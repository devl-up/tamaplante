/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Host.WebApi
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { customInstance } from "../mutator/custom-instance";
import type { ErrorType, BodyType } from "../mutator/custom-instance";
export interface ProblemDetails {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
  [key: string]: unknown;
}

export interface CatalogProductsAddProductCommand {
  description: string;
  id: string;
  name: string;
  price: number;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const postApiV1Products = (
  catalogProductsAddProductCommand: BodyType<CatalogProductsAddProductCommand>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v1/products`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: catalogProductsAddProductCommand,
    },
    options,
  );
};

export const getPostApiV1ProductsMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Products>>,
    TError,
    { data: BodyType<CatalogProductsAddProductCommand> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Products>>,
  TError,
  { data: BodyType<CatalogProductsAddProductCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Products>>,
    { data: BodyType<CatalogProductsAddProductCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Products(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ProductsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Products>>
>;
export type PostApiV1ProductsMutationBody =
  BodyType<CatalogProductsAddProductCommand>;
export type PostApiV1ProductsMutationError = ErrorType<ProblemDetails>;

export const usePostApiV1Products = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Products>>,
    TError,
    { data: BodyType<CatalogProductsAddProductCommand> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Products>>,
  TError,
  { data: BodyType<CatalogProductsAddProductCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1ProductsMutationOptions(options);

  return useMutation(mutationOptions);
};
